
EXAMPLES = dyn halo halo2 branch fail #stencil matrix strcmp simple vector
CPPFLAGS=-I../include
#LDLIBS=-L.. -ldbrew # with libs, dependencies do not work

# optimization flags should be the same as for DBrew snippets.
# thus, the Makefile from the top directory overrides OPTS for this.
# this is to avoid e.g. SSE/AVX transition penalties
OPTS=-g -O2 -mavx -mno-avx 
CFLAGS=-std=gnu99 $(OPTS)

## no PIE: flags dependent on compiler/version
CCNAME:=$(strip $(shell $(CC) --version | head -c 3))
ifeq ($(CCNAME),$(filter $(CCNAME),gcc cc icc))
 $(info ** gcc compatible compiler detected: $(CC))
 CFLAGS  += -fno-pie
 ifeq ($(shell expr `$(CC) -dumpversion | cut -f1 -d.` \>= 5),1)
  LDFLAGS += -no-pie
 endif
else ifeq ($(shell $(CC) -v 2>&1 | egrep -c "(clang version|Apple LLVM version)"), 1)
 $(info ** clang detected: $(CC))
 CFLAGS += -fno-pie
else
 $(error Compiler $(CC) not supported)
endif

all: $(EXAMPLES)

dyn: dyn.o ../libdbrew.a

halo: halo.o ../libdbrew.a

halo2: halo2.o ../libdbrew.a

branch: branch.o ../libdbrew.a

fail: fail.o ../libdbrew.a

#stencil: stencil.o ../libdbrew.a

#matrix: matrix.o ../libdbrew.a

#strcmp: strcmp.o ../libdbrew.a

#simple: simple.o ../libdbrew.a

#vector: vector.o ../libdbrew.a

clean:
	rm -f *.o *~ $(EXAMPLES)
