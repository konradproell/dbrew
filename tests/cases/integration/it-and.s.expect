>>> Testcase unknown par = 1.
Saving current emulator state: new with esID 0
Capture 'H-call' (into test|0 + 0)
Processing BB (test|0)
Emulation Static State (esID 0, call depth 0):
  Registers: %rsp (R 0)
  Flags: (none)
  Stack: (none)
Decoding BB test ...
                test:  48 89 f8              mov     %rdi,%rax
              test+3:  48 83 e0 00           and     $0x0,%rax
              test+7:  48 89 fb              mov     %rdi,%rbx
             test+10:  48 83 e3 ff           and     $0xffffffffffffffff,%rbx
             test+14:  48 01 d8              add     %rbx,%rax
             test+17:  48 23 1e              and     (%rsi),%rbx
             test+20:  48 01 d8              add     %rbx,%rax
             test+23:  c3                    ret    
Emulate 'test: mov %rdi,%rax'
Capture 'mov %rdi,%rax' (into test|0 + 1)
Emulate 'test+3: and $0x0,%rax'
Emulate 'test+7: mov %rdi,%rbx'
Capture 'mov %rdi,%rbx' (into test|0 + 2)
Emulate 'test+10: and $0xffffffffffffffff,%rbx'
Emulate 'test+14: add %rbx,%rax'
Capture 'mov %rbx,%rax' (into test|0 + 3)
Emulate 'test+17: and (%rsi),%rbx'
Capture 'and (%rsi),%rbx' (into test|0 + 4)
Emulate 'test+20: add %rbx,%rax'
Capture 'add %rbx,%rax' (into test|0 + 5)
Emulate 'test+23: ret'
Capture 'H-ret' (into test|0 + 6)
Capture 'ret' (into test|0 + 7)
Generating code for BB test|0 (8 instructions)
  I 0 : H-call                           (test|0)+0   
  I 1 : mov     %rdi,%rax                (test|0)+0    48 89 f8
  I 2 : mov     %rdi,%rbx                (test|0)+3    48 89 fb
  I 3 : mov     %rbx,%rax                (test|0)+6    48 89 d8
  I 4 : and     (%rsi),%rbx              (test|0)+9    48 23 1e
  I 5 : add     %rbx,%rax                (test|0)+12   48 01 d8
  I 6 : H-ret                            (test|0)+15  
  I 7 : ret                              (test|0)+15   c3
Generated: 16 bytes (pass1: 42)
BB gen (6 instructions):
                 gen:  48 89 f8              mov     %rdi,%rax
               gen+3:  48 89 fb              mov     %rdi,%rbx
               gen+6:  48 89 d8              mov     %rbx,%rax
               gen+9:  48 23 1e              and     (%rsi),%rbx
              gen+12:  48 01 d8              add     %rbx,%rax
              gen+15:  c3                    ret    
>>> Testcase known par = 1.
Saving current emulator state: new with esID 0
Capture 'H-call' (into test|0 + 0)
Processing BB (test|0)
Emulation Static State (esID 0, call depth 0):
  Registers: %rsp (R 0), %rdi (0x1)
  Flags: (none)
  Stack: (none)
Decoding BB test ...
                test:  48 89 f8              mov     %rdi,%rax
              test+3:  48 83 e0 00           and     $0x0,%rax
              test+7:  48 89 fb              mov     %rdi,%rbx
             test+10:  48 83 e3 ff           and     $0xffffffffffffffff,%rbx
             test+14:  48 01 d8              add     %rbx,%rax
             test+17:  48 23 1e              and     (%rsi),%rbx
             test+20:  48 01 d8              add     %rbx,%rax
             test+23:  c3                    ret    
Emulate 'test: mov %rdi,%rax'
Emulate 'test+3: and $0x0,%rax'
Emulate 'test+7: mov %rdi,%rbx'
Emulate 'test+10: and $0xffffffffffffffff,%rbx'
Emulate 'test+14: add %rbx,%rax'
Emulate 'test+17: and (%rsi),%rbx'
Capture 'mov $0x1,%rbx' (into test|0 + 1)
Capture 'and (%rsi),%rbx' (into test|0 + 2)
Emulate 'test+20: add %rbx,%rax'
Capture 'mov $0x1,%rax' (into test|0 + 3)
Capture 'add %rbx,%rax' (into test|0 + 4)
Emulate 'test+23: ret'
Capture 'H-ret' (into test|0 + 5)
Capture 'ret' (into test|0 + 6)
Generating code for BB test|0 (7 instructions)
  I 0 : H-call                           (test|0)+0   
  I 1 : mov     $0x1,%rbx                (test|0)+0    48 c7 c3 01 00 00 00
  I 2 : and     (%rsi),%rbx              (test|0)+7    48 23 1e
  I 3 : mov     $0x1,%rax                (test|0)+10   48 c7 c0 01 00 00 00
  I 4 : add     %rbx,%rax                (test|0)+17   48 01 d8
  I 5 : H-ret                            (test|0)+20  
  I 6 : ret                              (test|0)+20   c3
Generated: 21 bytes (pass1: 47)
BB gen (5 instructions):
                 gen:  48 c7 c3 01 00 00 00  mov     $0x1,%rbx
               gen+7:  48 23 1e              and     (%rsi),%rbx
              gen+10:  48 c7 c0 01 00 00 00  mov     $0x1,%rax
              gen+17:  48 01 d8              add     %rbx,%rax
              gen+20:  c3                    ret    
