>>> Testcase known par = 1.
Saving current emulator state: new with esID 0
Capture 'H-call' (into test|0 + 0)
Processing BB (test|0)
Emulation Static State (esID 0, call depth 0):
  Registers: %rsp (R 0), %rdi (0x1)
  Flags: (none)
  Stack: (none)
Decoding BB test ...
                test:  6a 5b                 pushq   $0x5b
              test+2:  68 56 55 55 ff        pushq   $0xffffffffff555556
              test+7:  6a f0                 pushq   $0xfffffffffffffff0
              test+9:  48 c7 c3 bb 0b 00 00  mov     $0xbbb,%rbx
             test+16:  66 53                 push    %bx
             test+18:  66 68 cc 0c           pushw   $0xccc
             test+22:  48 bb dd dd dd dd dd  mov     $0xdddddddddddd,%rbx
             test+29:  dd 00 00            
             test+32:  53                    push    %rbx
             test+33:  41 59                 pop     %r9
             test+35:  48 31 d2              xor     %rdx,%rdx
             test+38:  48 31 c9              xor     %rcx,%rcx
             test+41:  66 5a                 pop     %dx
             test+43:  66 59                 pop     %cx
             test+45:  41 5a                 pop     %r10
             test+47:  5b                    pop     %rbx
             test+48:  58                    pop     %rax
             test+49:  4c 01 c8              add     %r9,%rax
             test+52:  48 01 d8              add     %rbx,%rax
             test+55:  4c 01 d0              add     %r10,%rax
             test+58:  48 01 c8              add     %rcx,%rax
             test+61:  48 01 d0              add     %rdx,%rax
             test+64:  c3                    ret    
Emulate 'test: pushq $0x5b'
Capture 'sub $0x8,%rsp' (into test|0 + 1)
Emulate 'test+2: pushq $0xffffffffff555556'
Capture 'sub $0x8,%rsp' (into test|0 + 2)
Emulate 'test+7: pushq $0xfffffffffffffff0'
Capture 'sub $0x8,%rsp' (into test|0 + 3)
Emulate 'test+9: mov $0xbbb,%rbx'
Emulate 'test+16: push %bx'
Capture 'sub $0x2,%rsp' (into test|0 + 4)
Emulate 'test+18: pushw $0xccc'
Capture 'sub $0x2,%rsp' (into test|0 + 5)
Emulate 'test+22: mov $0xdddddddddddd,%rbx'
Emulate 'test+32: push %rbx'
Capture 'sub $0x8,%rsp' (into test|0 + 6)
Emulate 'test+33: pop %r9'
Capture 'add $0x8,%rsp' (into test|0 + 7)
Emulate 'test+35: xor %rdx,%rdx'
Emulate 'test+38: xor %rcx,%rcx'
Emulate 'test+41: pop %dx'
Capture 'add $0x2,%rsp' (into test|0 + 8)
Emulate 'test+43: pop %cx'
Capture 'add $0x2,%rsp' (into test|0 + 9)
Emulate 'test+45: pop %r10'
Capture 'add $0x8,%rsp' (into test|0 + 10)
Emulate 'test+47: pop %rbx'
Capture 'add $0x8,%rsp' (into test|0 + 11)
Emulate 'test+48: pop %rax'
Capture 'add $0x8,%rsp' (into test|0 + 12)
Emulate 'test+49: add %r9,%rax'
Emulate 'test+52: add %rbx,%rax'
Emulate 'test+55: add %r10,%rax'
Emulate 'test+58: add %rcx,%rax'
Emulate 'test+61: add %rdx,%rax'
Emulate 'test+64: ret'
Capture 'H-ret' (into test|0 + 13)
Capture 'mov $0xdddddd334c05,%rax' (into test|0 + 14)
Capture 'ret' (into test|0 + 15)
Generating code for BB test|0 (16 instructions)
  I 0 : H-call                           (test|0)+0   
  I 1 : sub     $0x8,%rsp                (test|0)+0    48 83 ec 08
  I 2 : sub     $0x8,%rsp                (test|0)+4    48 83 ec 08
  I 3 : sub     $0x8,%rsp                (test|0)+8    48 83 ec 08
  I 4 : sub     $0x2,%rsp                (test|0)+12   48 83 ec 02
  I 5 : sub     $0x2,%rsp                (test|0)+16   48 83 ec 02
  I 6 : sub     $0x8,%rsp                (test|0)+20   48 83 ec 08
  I 7 : add     $0x8,%rsp                (test|0)+24   48 83 c4 08
  I 8 : add     $0x2,%rsp                (test|0)+28   48 83 c4 02
  I 9 : add     $0x2,%rsp                (test|0)+32   48 83 c4 02
  I10 : add     $0x8,%rsp                (test|0)+36   48 83 c4 08
  I11 : add     $0x8,%rsp                (test|0)+40   48 83 c4 08
  I12 : add     $0x8,%rsp                (test|0)+44   48 83 c4 08
  I13 : H-ret                            (test|0)+48  
  I14 : mov     $0xdddddd334c05,%rax     (test|0)+48   48 b8 05 4c 33 dd dd dd 00 00
  I15 : ret                              (test|0)+58   c3
Generated: 59 bytes (pass1: 85)
BB gen (14 instructions):
                 gen:  48 83 ec 08           sub     $0x8,%rsp
               gen+4:  48 83 ec 08           sub     $0x8,%rsp
               gen+8:  48 83 ec 08           sub     $0x8,%rsp
              gen+12:  48 83 ec 02           sub     $0x2,%rsp
              gen+16:  48 83 ec 02           sub     $0x2,%rsp
              gen+20:  48 83 ec 08           sub     $0x8,%rsp
              gen+24:  48 83 c4 08           add     $0x8,%rsp
              gen+28:  48 83 c4 02           add     $0x2,%rsp
              gen+32:  48 83 c4 02           add     $0x2,%rsp
              gen+36:  48 83 c4 08           add     $0x8,%rsp
              gen+40:  48 83 c4 08           add     $0x8,%rsp
              gen+44:  48 83 c4 08           add     $0x8,%rsp
              gen+48:  48 b8 05 4c 33 dd dd  mov     $0xdddddd334c05,%rax
              gen+55:  dd 00 00            
              gen+58:  c3                    ret    
>>> Run orig/rewritten: 243944968637445/243944968637445
