>>> Testcase known par = 1.
Saving current emulator state: new with esID 0
Capture 'H-call' (into test|0 + 0)
Processing BB (test|0)
Emulation Static State (esID 0, call depth 0):
  Registers: %rsp (R 0), %rdi (0x1)
  Flags: (none)
  Stack: (none)
Decoding BB test ...
                test:  xor     %rax,%rax
              test+3:  movq    %rdi,%xmm0
              test+8:  movq    %rsi,%xmm1
             test+13:  addsd   %xmm1,%xmm0
             test+17:  addsd   rdata,%xmm0
             test+26:  movq    %xmm0,%rax
             test+31:  ret    
Emulate 'test: xor %rax,%rax'
Emulate 'test+3: movq %rdi,%xmm0'
Capture 'movq %rdi,%xmm0' (into test|0 + 1)
Emulate 'test+8: movq %rsi,%xmm1'
Capture 'movq %rsi,%xmm1' (into test|0 + 2)
Emulate 'test+13: addsd %xmm1,%xmm0'
Capture 'addsd %xmm1,%xmm0' (into test|0 + 3)
Emulate 'test+17: addsd rdata,%xmm0'
Capture 'addsd rdata,%xmm0' (into test|0 + 4)
Emulate 'test+26: movq %xmm0,%rax'
Capture 'movq %xmm0,%rax' (into test|0 + 5)
Emulate 'test+31: ret'
Capture 'H-ret' (into test|0 + 6)
Capture 'ret' (into test|0 + 7)
Generating code for BB test|0 (8 instructions)
  I 0 : H-call                           (test|0)+0  
  I 1 : movq    %rdi,%xmm0               (test|0)+0  
  I 2 : movq    %rsi,%xmm1               (test|0)+5  
  I 3 : addsd   %xmm1,%xmm0              (test|0)+10 
  I 4 : addsd   rdata,%xmm0              (test|0)+14 
  I 5 : movq    %xmm0,%rax               (test|0)+23 
  I 6 : H-ret                            (test|0)+28 
  I 7 : ret                              (test|0)+28 
Generated: 29 bytes (pass1: 55)
BB gen (6 instructions):
                 gen:  movq    %rdi,%xmm0
               gen+5:  movq    %rsi,%xmm1
              gen+10:  addsd   %xmm1,%xmm0
              gen+14:  addsd   rdata,%xmm0
              gen+23:  movq    %xmm0,%rax
              gen+28:  ret    
