>>> Testcase known par = 1.
Saving current emulator state: new with esID 0
Capture 'H-call' (into test|0 + 0)
Processing BB (test|0)
Emulation Static State (esID 0, call depth 0):
  Registers: %rsp (R 0), %rdi (0x1)
  Flags: (none)
  Stack: (none)
Decoding BB test ...
                test:  XX mov     $test+14,%r14
              test+7:  XX 
             test+10:  41 ff d6              call    %r14
Emulate 'test: mov $test+14,%r14'
Emulate 'test+10: call %r14'
Capture 'sub $0x8,%rsp' (into test|0 + 1)
Capture 'H-call' (into test|0 + 2)
Decoding BB test+14 ...
             test+14:  b8 00 00 00 00        mov     $0x0,%eax
             test+19:  c3                    ret    
Emulate 'test+14: mov $0x0,%eax'
Emulate 'test+19: ret'
Capture 'H-ret' (into test|0 + 3)
Capture 'add $0x8,%rsp' (into test|0 + 4)
Decoding BB test+13 ...
             test+13:  c3                    ret    
Emulate 'test+13: ret'
Capture 'H-ret' (into test|0 + 5)
Capture 'mov $0x0,%rax' (into test|0 + 6)
Capture 'ret' (into test|0 + 7)
Generating code for BB test|0 (8 instructions)
  I 0 : H-call                           (test|0)+0   
  I 1 : sub     $0x8,%rsp                (test|0)+0    48 83 ec 08
  I 2 : H-call                           (test|0)+4   
  I 3 : H-ret                            (test|0)+4   
  I 4 : add     $0x8,%rsp                (test|0)+4    48 83 c4 08
  I 5 : H-ret                            (test|0)+8   
  I 6 : mov     $0x0,%rax                (test|0)+8    48 31 c0
  I 7 : ret                              (test|0)+11   c3
Generated: 12 bytes (pass1: 38)
BB gen (4 instructions):
                 gen:  48 83 ec 08           sub     $0x8,%rsp
               gen+4:  48 83 c4 08           add     $0x8,%rsp
               gen+8:  48 31 c0              xor     %rax,%rax
              gen+11:  c3                    ret    
